// <auto-generated />
using EnvironmentAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnvironmentAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnvironmentAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnvironmentAPI.Models.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("EnvironmentAPI.Models.WorldObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PrefabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorldId");

                    b.ToTable("WorldObjects");
                });

            modelBuilder.Entity("EnvironmentAPI.Models.World", b =>
                {
                    b.HasOne("EnvironmentAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnvironmentAPI.Models.WorldObject", b =>
                {
                    b.HasOne("EnvironmentAPI.Models.World", "World")
                        .WithMany("WorldObjects")
                        .HasForeignKey("WorldId");

                    b.OwnsOne("EnvironmentAPI.Models.QuaternionData", "Rotation", b1 =>
                        {
                            b1.Property<int>("WorldObjectId")
                                .HasColumnType("int");

                            b1.Property<float>("W")
                                .HasColumnType("real");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectId");
                        });

                    b.OwnsOne("EnvironmentAPI.Models.Vector3Data", "Position", b1 =>
                        {
                            b1.Property<int>("WorldObjectId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectId");
                        });

                    b.OwnsOne("EnvironmentAPI.Models.Vector3Data", "Scale", b1 =>
                        {
                            b1.Property<int>("WorldObjectId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectId");
                        });

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Rotation")
                        .IsRequired();

                    b.Navigation("Scale")
                        .IsRequired();

                    b.Navigation("World");
                });

            modelBuilder.Entity("EnvironmentAPI.Models.World", b =>
                {
                    b.Navigation("WorldObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
