// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniteApi;

#nullable disable

namespace UniteApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628224242_AddUserEntity")]
    partial class AddUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UniteApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniteApi.Models.WorldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("UniteApi.Models.WorldObjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PrefabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorldEntityId");

                    b.ToTable("WorldObjects");
                });

            modelBuilder.Entity("UniteApi.Models.WorldObjectEntity", b =>
                {
                    b.HasOne("UniteApi.Models.WorldEntity", "World")
                        .WithMany("WorldObjects")
                        .HasForeignKey("WorldEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UniteApi.Models.QuaternionData", "Rotation", b1 =>
                        {
                            b1.Property<int>("WorldObjectEntityId")
                                .HasColumnType("int");

                            b1.Property<float>("W")
                                .HasColumnType("real");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectEntityId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectEntityId");
                        });

                    b.OwnsOne("UniteApi.Models.Vector3Data", "Position", b1 =>
                        {
                            b1.Property<int>("WorldObjectEntityId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectEntityId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectEntityId");
                        });

                    b.OwnsOne("UniteApi.Models.Vector3Data", "Scale", b1 =>
                        {
                            b1.Property<int>("WorldObjectEntityId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("WorldObjectEntityId");

                            b1.ToTable("WorldObjects");

                            b1.WithOwner()
                                .HasForeignKey("WorldObjectEntityId");
                        });

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Rotation")
                        .IsRequired();

                    b.Navigation("Scale")
                        .IsRequired();

                    b.Navigation("World");
                });

            modelBuilder.Entity("UniteApi.Models.WorldEntity", b =>
                {
                    b.Navigation("WorldObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
